#ifndef __GLMOCK_HPP__
#define __GLMOCK_HPP__

#include <gmock/gmock.h>

#include <GL/gl3w.h>

// class GLMock {
// public:
//     GLMock();
//     ~GLMock();
//     // MOCK_METHOD1( imaxabs, intmax_t (intmax_t __n) );
//     // MOCK_METHOD2( imaxdiv, imaxdiv_t (intmax_t __numer, intmax_t __denom) );
//     // MOCK_METHOD3( strtoimax, intmax_t (const char *restrict __nptr, chark **restrict __endptr, int __base) );
//     // MOCK_METHOD3( strtoumax, uintmax_t (const char *restrict __nptr, char **restrict __endptr, int __base) );
//     // MOCK_METHOD3( wcstoimax, intmax_t (const __gwchar_t *restrict __nptr, __gwchar_t **restrict __endptr, int __base) );
//     // MOCK_METHOD3( wcstoumax, uintmax_t (const __gwchar_t *restrict __nptr, __gwchar_t **restrict __endptr, int __base) );
//     // MOCK_METHOD0( gl3wInit, int () );
//     // MOCK_METHOD2( gl3wIsSupported, int (int major, int minor) );
//     // MOCK_METHOD1( gl3wGetProcAddress, GL3WglProc (const char * proc) );
//     MOCK_METHOD2( gl3wActiveShaderProgram, void  (GLuint pipeline, GLuint program) );
//     // MOCK_METHOD1( gl3wActiveTexture, void  (GLenum texture) );
//     // MOCK_METHOD2( gl3wAttachShader, void  (GLuint program, GLuint shader) );
//     // MOCK_METHOD2( gl3wBeginConditionalRender, void  (GLuint id, GLenum mode) );
//     // MOCK_METHOD2( gl3wBeginQuery, void  (GLenum target, GLuint id) );
//     // MOCK_METHOD3( gl3wBeginQueryIndexed, void  (GLenum target, GLuint index, GLuint id) );
//     // MOCK_METHOD1( gl3wBeginTransformFeedback, void  (GLenum primitiveMode) );
//     // MOCK_METHOD3( gl3wBindAttribLocation, void  (GLuint program, GLuint index, const GLchar * name) );
//     // MOCK_METHOD2( gl3wBindBuffer, void  (GLenum target, GLuint buffer) );
//     // MOCK_METHOD3( gl3wBindBufferBase, void  (GLenum target, GLuint index, GLuint buffer) );
//     // MOCK_METHOD5( gl3wBindBufferRange, void  (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) );
//     // MOCK_METHOD4( gl3wBindBuffersBase, void  (GLenum target, GLuint first, GLsizei count, const GLuint * buffers) );
//     // MOCK_METHOD6( gl3wBindBuffersRange, void  (GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes) );
//     // MOCK_METHOD3( gl3wBindFragDataLocation, void  (GLuint program, GLuint color, const GLchar * name) );
//     // MOCK_METHOD4( gl3wBindFragDataLocationIndexed, void  (GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) );
//     // MOCK_METHOD2( gl3wBindFramebuffer, void  (GLenum target, GLuint framebuffer) );
//     // MOCK_METHOD7( gl3wBindImageTexture, void  (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) );
//     // MOCK_METHOD3( gl3wBindImageTextures, void  (GLuint first, GLsizei count, const GLuint * textures) );
//     // MOCK_METHOD1( gl3wBindProgramPipeline, void  (GLuint pipeline) );
//     // MOCK_METHOD2( gl3wBindRenderbuffer, void  (GLenum target, GLuint renderbuffer) );
//     // MOCK_METHOD2( gl3wBindSampler, void  (GLuint unit, GLuint sampler) );
//     // MOCK_METHOD3( gl3wBindSamplers, void  (GLuint first, GLsizei count, const GLuint * samplers) );
//     // MOCK_METHOD2( gl3wBindTexture, void  (GLenum target, GLuint texture) );
//     // MOCK_METHOD2( gl3wBindTextureUnit, void  (GLuint unit, GLuint texture) );
//     // MOCK_METHOD3( gl3wBindTextures, void  (GLuint first, GLsizei count, const GLuint * textures) );
//     // MOCK_METHOD2( gl3wBindTransformFeedback, void  (GLenum target, GLuint id) );
//     // MOCK_METHOD1( gl3wBindVertexArray, void  (GLuint array) );
//     // MOCK_METHOD4( gl3wBindVertexBuffer, void  (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) );
//     // MOCK_METHOD5( gl3wBindVertexBuffers, void  (GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) );
//     // MOCK_METHOD4( gl3wBlendColor, void  (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) );
//     // MOCK_METHOD1( gl3wBlendEquation, void  (GLenum mode) );
//     // MOCK_METHOD2( gl3wBlendEquationSeparate, void  (GLenum modeRGB, GLenum modeAlpha) );
//     // MOCK_METHOD3( gl3wBlendEquationSeparatei, void  (GLuint buf, GLenum modeRGB, GLenum modeAlpha) );
//     // MOCK_METHOD3( gl3wBlendEquationSeparateiARB, void  (GLuint buf, GLenum modeRGB, GLenum modeAlpha) );
//     // MOCK_METHOD2( gl3wBlendEquationi, void  (GLuint buf, GLenum mode) );
//     // MOCK_METHOD2( gl3wBlendEquationiARB, void  (GLuint buf, GLenum mode) );
//     // MOCK_METHOD2( gl3wBlendFunc, void  (GLenum sfactor, GLenum dfactor) );
//     // MOCK_METHOD4( gl3wBlendFuncSeparate, void  (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) );
//     // MOCK_METHOD5( gl3wBlendFuncSeparatei, void  (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) );
//     // MOCK_METHOD5( gl3wBlendFuncSeparateiARB, void  (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) );
//     // MOCK_METHOD3( gl3wBlendFunci, void  (GLuint buf, GLenum src, GLenum dst) );
//     // MOCK_METHOD3( gl3wBlendFunciARB, void  (GLuint buf, GLenum src, GLenum dst) );
//     // MOCK_METHOD10( gl3wBlitFramebuffer, void  (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) );
//     // MOCK_METHOD4( gl3wBufferData, void  (GLenum target, GLsizeiptr size, const void * data, GLenum usage) );
//     // MOCK_METHOD4( gl3wBufferPageCommitmentARB, void  (GLenum target, GLintptr offset, GLsizei size, GLboolean commit) );
//     // MOCK_METHOD4( gl3wBufferStorage, void  (GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) );
//     // MOCK_METHOD4( gl3wBufferSubData, void  (GLenum target, GLintptr offset, GLsizeiptr size, const void * data) );
//     // MOCK_METHOD1( gl3wCheckFramebufferStatus, unsigned int  (GLenum target) );
//     // MOCK_METHOD2( gl3wCheckNamedFramebufferStatus, unsigned int  (GLuint framebuffer, GLenum target) );
//     // MOCK_METHOD2( gl3wClampColor, void  (GLenum target, GLenum clamp) );
//     // MOCK_METHOD1( gl3wClear, void  (GLbitfield mask) );
//     // MOCK_METHOD5( gl3wClearBufferData, void  (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data) );
//     // MOCK_METHOD7( gl3wClearBufferSubData, void  (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) );
//     // MOCK_METHOD4( gl3wClearBufferfi, void  (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) );
//     // MOCK_METHOD3( gl3wClearBufferfv, void  (GLenum buffer, GLint drawbuffer, const GLfloat * value) );
//     // MOCK_METHOD3( gl3wClearBufferiv, void  (GLenum buffer, GLint drawbuffer, const GLint * value) );
//     // MOCK_METHOD3( gl3wClearBufferuiv, void  (GLenum buffer, GLint drawbuffer, const GLuint * value) );
//     // MOCK_METHOD4( gl3wClearColor, void  (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) );
//     // MOCK_METHOD1( gl3wClearDepth, void  (GLdouble depth) );
//     // MOCK_METHOD1( gl3wClearDepthf, void  (GLfloat d) );
//     // MOCK_METHOD5( gl3wClearNamedBufferData, void  (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) );
//     // MOCK_METHOD7( gl3wClearNamedBufferSubData, void  (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizei size, GLenum format, GLenum type, const void * data) );
//     // MOCK_METHOD4( gl3wClearNamedFramebufferfi, void  (GLuint framebuffer, GLenum buffer, const GLfloat depth, GLint stencil) );
//     // MOCK_METHOD4( gl3wClearNamedFramebufferfv, void  (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value) );
//     // MOCK_METHOD4( gl3wClearNamedFramebufferiv, void  (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value) );
//     // MOCK_METHOD4( gl3wClearNamedFramebufferuiv, void  (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value) );
//     // MOCK_METHOD1( gl3wClearStencil, void  (GLint s) );
//     // MOCK_METHOD5( gl3wClearTexImage, void  (GLuint texture, GLint level, GLenum format, GLenum type, const void * data) );
//     // MOCK_METHOD3( gl3wClientWaitSync, unsigned int  (GLsync sync, GLbitfield flags, GLuint64 timeout) );
//     // MOCK_METHOD2( gl3wClipControl, void  (GLenum origin, GLenum depth) );
//     // MOCK_METHOD4( gl3wColorMask, void  (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) );
//     // MOCK_METHOD5( gl3wColorMaski, void  (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) );
//     // MOCK_METHOD1( gl3wCompileShader, void  (GLuint shader) );
//     // MOCK_METHOD4( gl3wCompileShaderIncludeARB, void  (GLuint shader, GLsizei count, const GLchar *const * path, const GLint * length) );
//     // MOCK_METHOD7( gl3wCompressedTexImage1D, void  (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) );
//     // MOCK_METHOD8( gl3wCompressedTexImage2D, void  (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) );
//     // MOCK_METHOD9( gl3wCompressedTexImage3D, void  (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) );
//     // MOCK_METHOD7( gl3wCompressedTexSubImage1D, void  (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) );
//     // MOCK_METHOD9( gl3wCompressedTexSubImage2D, void  (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) );
//     // MOCK_METHOD7( gl3wCompressedTextureSubImage1D, void  (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) );
//     // MOCK_METHOD9( gl3wCompressedTextureSubImage2D, void  (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) );
//     // MOCK_METHOD5( gl3wCopyBufferSubData, void  (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) );
//     // MOCK_METHOD5( gl3wCopyNamedBufferSubData, void  (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizei size) );
//     // MOCK_METHOD7( gl3wCopyTexImage1D, void  (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) );
//     // MOCK_METHOD8( gl3wCopyTexImage2D, void  (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) );
//     // MOCK_METHOD6( gl3wCopyTexSubImage1D, void  (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) );
//     // MOCK_METHOD8( gl3wCopyTexSubImage2D, void  (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) );
//     // MOCK_METHOD9( gl3wCopyTexSubImage3D, void  (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) );
//     // MOCK_METHOD6( gl3wCopyTextureSubImage1D, void  (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) );
//     // MOCK_METHOD8( gl3wCopyTextureSubImage2D, void  (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) );
//     // MOCK_METHOD9( gl3wCopyTextureSubImage3D, void  (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) );
//     // MOCK_METHOD2( gl3wCreateBuffers, void  (GLsizei n, GLuint * buffers) );
//     // MOCK_METHOD2( gl3wCreateFramebuffers, void  (GLsizei n, GLuint * framebuffers) );
//     // MOCK_METHOD0( gl3wCreateProgram, unsigned int  () );
//     // MOCK_METHOD2( gl3wCreateProgramPipelines, void  (GLsizei n, GLuint * pipelines) );
//     // MOCK_METHOD3( gl3wCreateQueries, void  (GLenum target, GLsizei n, GLuint * ids) );
//     // MOCK_METHOD2( gl3wCreateRenderbuffers, void  (GLsizei n, GLuint * renderbuffers) );
//     // MOCK_METHOD2( gl3wCreateSamplers, void  (GLsizei n, GLuint * samplers) );
//     // MOCK_METHOD1( gl3wCreateShader, unsigned int  (GLenum type) );
//     // MOCK_METHOD3( gl3wCreateShaderProgramv, unsigned int  (GLenum type, GLsizei count, const GLchar *const * strings) );
//     // MOCK_METHOD3( gl3wCreateSyncFromCLeventARB, struct __GLsync * (struct _cl_context * context, struct _cl_event * event, GLbitfield flags) );
//     // MOCK_METHOD3( gl3wCreateTextures, void  (GLenum target, GLsizei n, GLuint * textures) );
//     // MOCK_METHOD2( gl3wCreateTransformFeedbacks, void  (GLsizei n, GLuint * ids) );
//     // MOCK_METHOD2( gl3wCreateVertexArrays, void  (GLsizei n, GLuint * arrays) );
//     // MOCK_METHOD1( gl3wCullFace, void  (GLenum mode) );
//     // MOCK_METHOD2( gl3wDebugMessageCallback, void  (GLDEBUGPROC callback, const void * userParam) );
//     // MOCK_METHOD2( gl3wDebugMessageCallbackARB, void  (GLDEBUGPROCARB callback, const void * userParam) );
//     // MOCK_METHOD6( gl3wDebugMessageControl, void  (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) );
//     // MOCK_METHOD6( gl3wDebugMessageControlARB, void  (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) );
//     // MOCK_METHOD6( gl3wDebugMessageInsert, void  (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) );
//     // MOCK_METHOD6( gl3wDebugMessageInsertARB, void  (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) );
//     // MOCK_METHOD2( gl3wDeleteBuffers, void  (GLsizei n, const GLuint * buffers) );
//     // MOCK_METHOD2( gl3wDeleteFramebuffers, void  (GLsizei n, const GLuint * framebuffers) );
//     // MOCK_METHOD2( gl3wDeleteNamedStringARB, void  (GLint namelen, const GLchar * name) );
//     // MOCK_METHOD1( gl3wDeleteProgram, void  (GLuint program) );
//     // MOCK_METHOD2( gl3wDeleteProgramPipelines, void  (GLsizei n, const GLuint * pipelines) );
//     // MOCK_METHOD2( gl3wDeleteQueries, void  (GLsizei n, const GLuint * ids) );
//     // MOCK_METHOD2( gl3wDeleteRenderbuffers, void  (GLsizei n, const GLuint * renderbuffers) );
//     // MOCK_METHOD2( gl3wDeleteSamplers, void  (GLsizei count, const GLuint * samplers) );
//     // MOCK_METHOD1( gl3wDeleteShader, void  (GLuint shader) );
//     // MOCK_METHOD1( gl3wDeleteSync, void  (GLsync sync) );
//     // MOCK_METHOD2( gl3wDeleteTextures, void  (GLsizei n, const GLuint * textures) );
//     // MOCK_METHOD2( gl3wDeleteTransformFeedbacks, void  (GLsizei n, const GLuint * ids) );
//     // MOCK_METHOD2( gl3wDeleteVertexArrays, void  (GLsizei n, const GLuint * arrays) );
//     // MOCK_METHOD1( gl3wDepthFunc, void  (GLenum func) );
//     // MOCK_METHOD1( gl3wDepthMask, void  (GLboolean flag) );
//     // MOCK_METHOD2( gl3wDepthRange, void  (GLdouble near, GLdouble far) );
//     // MOCK_METHOD3( gl3wDepthRangeArrayv, void  (GLuint first, GLsizei count, const GLdouble * v) );
//     // MOCK_METHOD3( gl3wDepthRangeIndexed, void  (GLuint index, GLdouble n, GLdouble f) );
//     // MOCK_METHOD2( gl3wDepthRangef, void  (GLfloat n, GLfloat f) );
//     // MOCK_METHOD2( gl3wDetachShader, void  (GLuint program, GLuint shader) );
//     // MOCK_METHOD1( gl3wDisable, void  (GLenum cap) );
//     // MOCK_METHOD2( gl3wDisableVertexArrayAttrib, void  (GLuint vaobj, GLuint index) );
//     // MOCK_METHOD1( gl3wDisableVertexAttribArray, void  (GLuint index) );
//     // MOCK_METHOD2( gl3wDisablei, void  (GLenum target, GLuint index) );
//     // MOCK_METHOD3( gl3wDispatchCompute, void  (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) );
//     // MOCK_METHOD6( gl3wDispatchComputeGroupSizeARB, void  (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) );
//     // MOCK_METHOD1( gl3wDispatchComputeIndirect, void  (GLintptr indirect) );
//     // MOCK_METHOD3( gl3wDrawArrays, void  (GLenum mode, GLint first, GLsizei count) );
//     // MOCK_METHOD2( gl3wDrawArraysIndirect, void  (GLenum mode, const void * indirect) );
//     // MOCK_METHOD4( gl3wDrawArraysInstanced, void  (GLenum mode, GLint first, GLsizei count, GLsizei instancecount) );
//     // MOCK_METHOD5( gl3wDrawArraysInstancedBaseInstance, void  (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) );
//     // MOCK_METHOD1( gl3wDrawBuffer, void  (GLenum buf) );
//     // MOCK_METHOD2( gl3wDrawBuffers, void  (GLsizei n, const GLenum * bufs) );
//     // MOCK_METHOD4( gl3wDrawElements, void  (GLenum mode, GLsizei count, GLenum type, const void * indices) );
//     // MOCK_METHOD5( gl3wDrawElementsBaseVertex, void  (GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) );
//     // MOCK_METHOD3( gl3wDrawElementsIndirect, void  (GLenum mode, GLenum type, const void * indirect) );
//     // MOCK_METHOD5( gl3wDrawElementsInstanced, void  (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount) );
//     // MOCK_METHOD6( gl3wDrawElementsInstancedBaseInstance, void  (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) );
//     // MOCK_METHOD6( gl3wDrawElementsInstancedBaseVertex, void  (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) );
//     // MOCK_METHOD7( gl3wDrawElementsInstancedBaseVertexBaseInstance, void  (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) );
//     // MOCK_METHOD6( gl3wDrawRangeElements, void  (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) );
//     // MOCK_METHOD7( gl3wDrawRangeElementsBaseVertex, void  (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) );
//     // MOCK_METHOD2( gl3wDrawTransformFeedback, void  (GLenum mode, GLuint id) );
//     // MOCK_METHOD3( gl3wDrawTransformFeedbackInstanced, void  (GLenum mode, GLuint id, GLsizei instancecount) );
//     // MOCK_METHOD3( gl3wDrawTransformFeedbackStream, void  (GLenum mode, GLuint id, GLuint stream) );
//     // MOCK_METHOD4( gl3wDrawTransformFeedbackStreamInstanced, void  (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) );
//     // MOCK_METHOD1( gl3wEnable, void  (GLenum cap) );
//     // MOCK_METHOD2( gl3wEnableVertexArrayAttrib, void  (GLuint vaobj, GLuint index) );
//     // MOCK_METHOD1( gl3wEnableVertexAttribArray, void  (GLuint index) );
//     // MOCK_METHOD2( gl3wEnablei, void  (GLenum target, GLuint index) );
//     // MOCK_METHOD0( gl3wEndConditionalRender, void  () );
//     // MOCK_METHOD1( gl3wEndQuery, void  (GLenum target) );
//     // MOCK_METHOD2( gl3wEndQueryIndexed, void  (GLenum target, GLuint index) );
//     // MOCK_METHOD0( gl3wEndTransformFeedback, void  () );
//     // MOCK_METHOD2( gl3wFenceSync, struct __GLsync * (GLenum condition, GLbitfield flags) );
//     // MOCK_METHOD0( gl3wFinish, void  () );
//     // MOCK_METHOD0( gl3wFlush, void  () );
//     // MOCK_METHOD3( gl3wFlushMappedBufferRange, void  (GLenum target, GLintptr offset, GLsizeiptr length) );
//     // MOCK_METHOD3( gl3wFlushMappedNamedBufferRange, void  (GLuint buffer, GLintptr offset, GLsizei length) );
//     // MOCK_METHOD3( gl3wFramebufferParameteri, void  (GLenum target, GLenum pname, GLint param) );
//     // MOCK_METHOD4( gl3wFramebufferRenderbuffer, void  (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) );
//     // MOCK_METHOD4( gl3wFramebufferTexture, void  (GLenum target, GLenum attachment, GLuint texture, GLint level) );
//     // MOCK_METHOD5( gl3wFramebufferTexture1D, void  (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) );
//     // MOCK_METHOD5( gl3wFramebufferTexture2D, void  (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) );
//     // MOCK_METHOD6( gl3wFramebufferTexture3D, void  (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) );
//     // MOCK_METHOD5( gl3wFramebufferTextureLayer, void  (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) );
//     // MOCK_METHOD1( gl3wFrontFace, void  (GLenum mode) );
//     // MOCK_METHOD2( gl3wGenBuffers, void  (GLsizei n, GLuint * buffers) );
//     // MOCK_METHOD2( gl3wGenFramebuffers, void  (GLsizei n, GLuint * framebuffers) );
//     // MOCK_METHOD2( gl3wGenProgramPipelines, void  (GLsizei n, GLuint * pipelines) );
//     // MOCK_METHOD2( gl3wGenQueries, void  (GLsizei n, GLuint * ids) );
//     // MOCK_METHOD2( gl3wGenRenderbuffers, void  (GLsizei n, GLuint * renderbuffers) );
//     // MOCK_METHOD2( gl3wGenSamplers, void  (GLsizei count, GLuint * samplers) );
//     // MOCK_METHOD2( gl3wGenTextures, void  (GLsizei n, GLuint * textures) );
//     // MOCK_METHOD2( gl3wGenTransformFeedbacks, void  (GLsizei n, GLuint * ids) );
//     // MOCK_METHOD2( gl3wGenVertexArrays, void  (GLsizei n, GLuint * arrays) );
//     // MOCK_METHOD1( gl3wGenerateMipmap, void  (GLenum target) );
//     // MOCK_METHOD1( gl3wGenerateTextureMipmap, void  (GLuint texture) );
//     // MOCK_METHOD4( gl3wGetActiveAtomicCounterBufferiv, void  (GLuint program, GLuint bufferIndex, GLenum pname, GLint * params) );
//     // MOCK_METHOD7( gl3wGetActiveAttrib, void  (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) );
//     // MOCK_METHOD6( gl3wGetActiveSubroutineName, void  (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name) );
//     // MOCK_METHOD6( gl3wGetActiveSubroutineUniformName, void  (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name) );
//     // MOCK_METHOD5( gl3wGetActiveSubroutineUniformiv, void  (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values) );
//     // MOCK_METHOD7( gl3wGetActiveUniform, void  (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) );
//     // MOCK_METHOD5( gl3wGetActiveUniformBlockName, void  (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName) );
//     // MOCK_METHOD4( gl3wGetActiveUniformBlockiv, void  (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params) );
//     // MOCK_METHOD5( gl3wGetActiveUniformName, void  (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName) );
//     // MOCK_METHOD5( gl3wGetActiveUniformsiv, void  (GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params) );
//     // MOCK_METHOD4( gl3wGetAttachedShaders, void  (GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders) );
//     // MOCK_METHOD2( gl3wGetAttribLocation, int  (GLuint program, const GLchar * name) );
//     // MOCK_METHOD3( gl3wGetBooleani_v, void  (GLenum target, GLuint index, GLboolean * data) );
//     // MOCK_METHOD2( gl3wGetBooleanv, void  (GLenum pname, GLboolean * data) );
//     // MOCK_METHOD3( gl3wGetBufferParameteri64v, void  (GLenum target, GLenum pname, GLint64 * params) );
//     // MOCK_METHOD3( gl3wGetBufferParameteriv, void  (GLenum target, GLenum pname, GLint * params) );
//     // MOCK_METHOD3( gl3wGetBufferPointerv, void  (GLenum target, GLenum pname, void ** params) );
//     // MOCK_METHOD4( gl3wGetBufferSubData, void  (GLenum target, GLintptr offset, GLsizeiptr size, void * data) );
//     // MOCK_METHOD3( gl3wGetCompressedTexImage, void  (GLenum target, GLint level, void * img) );
//     // MOCK_METHOD4( gl3wGetCompressedTextureImage, void  (GLuint texture, GLint level, GLsizei bufSize, void * pixels) );
//     // MOCK_METHOD10( gl3wGetCompressedTextureSubImage, void  (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels) );
//     // MOCK_METHOD8( gl3wGetDebugMessageLog, unsigned int  (GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) );
//     // MOCK_METHOD8( gl3wGetDebugMessageLogARB, unsigned int  (GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) );
//     // MOCK_METHOD3( gl3wGetDoublei_v, void  (GLenum target, GLuint index, GLdouble * data) );
//     // MOCK_METHOD2( gl3wGetDoublev, void  (GLenum pname, GLdouble * data) );
//     // MOCK_METHOD0( gl3wGetError, unsigned int  () );
//     // MOCK_METHOD3( gl3wGetFloati_v, void  (GLenum target, GLuint index, GLfloat * data) );
//     // MOCK_METHOD2( gl3wGetFloatv, void  (GLenum pname, GLfloat * data) );
//     // MOCK_METHOD2( gl3wGetFragDataIndex, int  (GLuint program, const GLchar * name) );
//     // MOCK_METHOD2( gl3wGetFragDataLocation, int  (GLuint program, const GLchar * name) );
//     // MOCK_METHOD4( gl3wGetFramebufferAttachmentParameteriv, void  (GLenum target, GLenum attachment, GLenum pname, GLint * params) );
//     // MOCK_METHOD3( gl3wGetFramebufferParameteriv, void  (GLenum target, GLenum pname, GLint * params) );
//     // MOCK_METHOD0( gl3wGetGraphicsResetStatus, unsigned int  () );
//     // MOCK_METHOD0( gl3wGetGraphicsResetStatusARB, unsigned int  () );
//     // MOCK_METHOD5( gl3wGetImageHandleARB, unsigned long  (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) );
//     // MOCK_METHOD3( gl3wGetInteger64i_v, void  (GLenum target, GLuint index, GLint64 * data) );
//     // MOCK_METHOD2( gl3wGetInteger64v, void  (GLenum pname, GLint64 * data) );
//     // MOCK_METHOD3( gl3wGetIntegeri_v, void  (GLenum target, GLuint index, GLint * data) );
//     // MOCK_METHOD2( gl3wGetIntegerv, void  (GLenum pname, GLint * data) );
//     // MOCK_METHOD5( gl3wGetInternalformati64v, void  (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params) );
//     // MOCK_METHOD5( gl3wGetInternalformativ, void  (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params) );
//     // MOCK_METHOD3( gl3wGetMultisamplefv, void  (GLenum pname, GLuint index, GLfloat * val) );
//     // MOCK_METHOD3( gl3wGetNamedBufferParameteri64v, void  (GLuint buffer, GLenum pname, GLint64 * params) );
//     // MOCK_METHOD3( gl3wGetNamedBufferParameteriv, void  (GLuint buffer, GLenum pname, GLint * params) );
//     // MOCK_METHOD3( gl3wGetNamedBufferPointerv, void  (GLuint buffer, GLenum pname, void ** params) );
//     // MOCK_METHOD4( gl3wGetNamedBufferSubData, void  (GLuint buffer, GLintptr offset, GLsizei size, void * data) );
//     // MOCK_METHOD4( gl3wGetNamedFramebufferAttachmentParameteriv, void  (GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) );
//     // MOCK_METHOD3( gl3wGetNamedFramebufferParameteriv, void  (GLuint framebuffer, GLenum pname, GLint * param) );
//     // MOCK_METHOD3( gl3wGetNamedRenderbufferParameteriv, void  (GLuint renderbuffer, GLenum pname, GLint * params) );
//     // MOCK_METHOD5( gl3wGetNamedStringARB, void  (GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string) );
//     // MOCK_METHOD4( gl3wGetNamedStringivARB, void  (GLint namelen, const GLchar * name, GLenum pname, GLint * params) );
//     // MOCK_METHOD5( gl3wGetObjectLabel, void  (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) );
//     // MOCK_METHOD4( gl3wGetObjectPtrLabel, void  (const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) );
//     // MOCK_METHOD2( gl3wGetPointerv, void  (GLenum pname, void ** params) );
//     // MOCK_METHOD5( gl3wGetProgramBinary, void  (GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) );
//     // MOCK_METHOD4( gl3wGetProgramInfoLog, void  (GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog) );
//     // MOCK_METHOD4( gl3wGetProgramInterfaceiv, void  (GLuint program, GLenum programInterface, GLenum pname, GLint * params) );
//     // MOCK_METHOD4( gl3wGetProgramPipelineInfoLog, void  (GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) );
//     // MOCK_METHOD3( gl3wGetProgramPipelineiv, void  (GLuint pipeline, GLenum pname, GLint * params) );
//     // MOCK_METHOD3( gl3wGetProgramResourceIndex, unsigned int  (GLuint program, GLenum programInterface, const GLchar * name) );
//     // MOCK_METHOD3( gl3wGetProgramResourceLocation, int  (GLuint program, GLenum programInterface, const GLchar * name) );
//     // MOCK_METHOD3( gl3wGetProgramResourceLocationIndex, int  (GLuint program, GLenum programInterface, const GLchar * name) );
//     // MOCK_METHOD6( gl3wGetProgramResourceName, void  (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) );
//     // MOCK_METHOD8( gl3wGetProgramResourceiv, void  (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params) );
//     // MOCK_METHOD4( gl3wGetProgramStageiv, void  (GLuint program, GLenum shadertype, GLenum pname, GLint * values) );
//     // MOCK_METHOD3( gl3wGetProgramiv, void  (GLuint program, GLenum pname, GLint * params) );
//     // MOCK_METHOD4( gl3wGetQueryIndexediv, void  (GLenum target, GLuint index, GLenum pname, GLint * params) );
//     // MOCK_METHOD3( gl3wGetQueryObjecti64v, void  (GLuint id, GLenum pname, GLint64 * params) );
//     // MOCK_METHOD3( gl3wGetQueryObjectiv, void  (GLuint id, GLenum pname, GLint * params) );
//     // MOCK_METHOD3( gl3wGetQueryObjectui64v, void  (GLuint id, GLenum pname, GLuint64 * params) );
//     // MOCK_METHOD3( gl3wGetQueryObjectuiv, void  (GLuint id, GLenum pname, GLuint * params) );
//     // MOCK_METHOD3( gl3wGetQueryiv, void  (GLenum target, GLenum pname, GLint * params) );
//     // MOCK_METHOD3( gl3wGetRenderbufferParameteriv, void  (GLenum target, GLenum pname, GLint * params) );
//     // MOCK_METHOD3( gl3wGetSamplerParameterIiv, void  (GLuint sampler, GLenum pname, GLint * params) );
//     // MOCK_METHOD3( gl3wGetSamplerParameterIuiv, void  (GLuint sampler, GLenum pname, GLuint * params) );
//     // MOCK_METHOD3( gl3wGetSamplerParameterfv, void  (GLuint sampler, GLenum pname, GLfloat * params) );
//     // MOCK_METHOD3( gl3wGetSamplerParameteriv, void  (GLuint sampler, GLenum pname, GLint * params) );
//     // MOCK_METHOD4( gl3wGetShaderInfoLog, void  (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog) );
//     // MOCK_METHOD4( gl3wGetShaderPrecisionFormat, void  (GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision) );
//     // MOCK_METHOD4( gl3wGetShaderSource, void  (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source) );
//     // MOCK_METHOD3( gl3wGetShaderiv, void  (GLuint shader, GLenum pname, GLint * params) );
//     // MOCK_METHOD1( gl3wGetString, const unsigned char * (GLenum name) );
//     // MOCK_METHOD2( gl3wGetStringi, const unsigned char * (GLenum name, GLuint index) );
//     // MOCK_METHOD3( gl3wGetSubroutineIndex, unsigned int  (GLuint program, GLenum shadertype, const GLchar * name) );
//     // MOCK_METHOD3( gl3wGetSubroutineUniformLocation, int  (GLuint program, GLenum shadertype, const GLchar * name) );
//     // MOCK_METHOD5( gl3wGetSynciv, void  (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values) );
//     // MOCK_METHOD5( gl3wGetTexImage, void  (GLenum target, GLint level, GLenum format, GLenum type, void * pixels) );
//     // MOCK_METHOD4( gl3wGetTexLevelParameterfv, void  (GLenum target, GLint level, GLenum pname, GLfloat * params) );
//     // MOCK_METHOD4( gl3wGetTexLevelParameteriv, void  (GLenum target, GLint level, GLenum pname, GLint * params) );
//     // MOCK_METHOD3( gl3wGetTexParameterIiv, void  (GLenum target, GLenum pname, GLint * params) );
//     // MOCK_METHOD3( gl3wGetTexParameterIuiv, void  (GLenum target, GLenum pname, GLuint * params) );
//     // MOCK_METHOD3( gl3wGetTexParameterfv, void  (GLenum target, GLenum pname, GLfloat * params) );
//     // MOCK_METHOD3( gl3wGetTexParameteriv, void  (GLenum target, GLenum pname, GLint * params) );
//     // MOCK_METHOD1( gl3wGetTextureHandleARB, unsigned long  (GLuint texture) );
//     // MOCK_METHOD6( gl3wGetTextureImage, void  (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) );
//     // MOCK_METHOD4( gl3wGetTextureLevelParameterfv, void  (GLuint texture, GLint level, GLenum pname, GLfloat * params) );
//     // MOCK_METHOD4( gl3wGetTextureLevelParameteriv, void  (GLuint texture, GLint level, GLenum pname, GLint * params) );
//     // MOCK_METHOD3( gl3wGetTextureParameterIiv, void  (GLuint texture, GLenum pname, GLint * params) );
//     // MOCK_METHOD3( gl3wGetTextureParameterIuiv, void  (GLuint texture, GLenum pname, GLuint * params) );
//     // MOCK_METHOD3( gl3wGetTextureParameterfv, void  (GLuint texture, GLenum pname, GLfloat * params) );
//     // MOCK_METHOD3( gl3wGetTextureParameteriv, void  (GLuint texture, GLenum pname, GLint * params) );
//     // MOCK_METHOD2( gl3wGetTextureSamplerHandleARB, unsigned long  (GLuint texture, GLuint sampler) );
//     // MOCK_METHOD7( gl3wGetTransformFeedbackVarying, void  (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) );
//     // MOCK_METHOD4( gl3wGetTransformFeedbacki64_v, void  (GLuint xfb, GLenum pname, GLuint index, GLint64 * param) );
//     // MOCK_METHOD4( gl3wGetTransformFeedbacki_v, void  (GLuint xfb, GLenum pname, GLuint index, GLint * param) );
//     // MOCK_METHOD3( gl3wGetTransformFeedbackiv, void  (GLuint xfb, GLenum pname, GLint * param) );
//     // MOCK_METHOD2( gl3wGetUniformBlockIndex, unsigned int  (GLuint program, const GLchar * uniformBlockName) );
//     // MOCK_METHOD4( gl3wGetUniformIndices, void  (GLuint program, GLsizei uniformCount, const GLchar *const * uniformNames, GLuint * uniformIndices) );
//     // MOCK_METHOD2( gl3wGetUniformLocation, int  (GLuint program, const GLchar * name) );
//     // MOCK_METHOD3( gl3wGetUniformSubroutineuiv, void  (GLenum shadertype, GLint location, GLuint * params) );
//     // MOCK_METHOD3( gl3wGetUniformdv, void  (GLuint program, GLint location, GLdouble * params) );
//     // MOCK_METHOD3( gl3wGetUniformfv, void  (GLuint program, GLint location, GLfloat * params) );
//     // MOCK_METHOD3( gl3wGetUniformiv, void  (GLuint program, GLint location, GLint * params) );
//     // MOCK_METHOD3( gl3wGetUniformuiv, void  (GLuint program, GLint location, GLuint * params) );
//     // MOCK_METHOD4( gl3wGetVertexArrayIndexed64iv, void  (GLuint vaobj, GLuint index, GLenum pname, GLint64 * param) );
//     // MOCK_METHOD4( gl3wGetVertexArrayIndexediv, void  (GLuint vaobj, GLuint index, GLenum pname, GLint * param) );
//     // MOCK_METHOD3( gl3wGetVertexArrayiv, void  (GLuint vaobj, GLenum pname, GLint * param) );
//     // MOCK_METHOD3( gl3wGetVertexAttribIiv, void  (GLuint index, GLenum pname, GLint * params) );
//     // MOCK_METHOD3( gl3wGetVertexAttribIuiv, void  (GLuint index, GLenum pname, GLuint * params) );
//     // MOCK_METHOD3( gl3wGetVertexAttribLdv, void  (GLuint index, GLenum pname, GLdouble * params) );
//     // MOCK_METHOD3( gl3wGetVertexAttribLui64vARB, void  (GLuint index, GLenum pname, GLuint64EXT * params) );
//     // MOCK_METHOD3( gl3wGetVertexAttribPointerv, void  (GLuint index, GLenum pname, void ** pointer) );
//     // MOCK_METHOD3( gl3wGetVertexAttribdv, void  (GLuint index, GLenum pname, GLdouble * params) );
//     // MOCK_METHOD3( gl3wGetVertexAttribfv, void  (GLuint index, GLenum pname, GLfloat * params) );
//     // MOCK_METHOD3( gl3wGetVertexAttribiv, void  (GLuint index, GLenum pname, GLint * params) );
//     // MOCK_METHOD4( gl3wGetnCompressedTexImage, void  (GLenum target, GLint lod, GLsizei bufSize, void * pixels) );
//     // MOCK_METHOD4( gl3wGetnCompressedTexImageARB, void  (GLenum target, GLint lod, GLsizei bufSize, void * img) );
//     // MOCK_METHOD6( gl3wGetnTexImage, void  (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) );
//     // MOCK_METHOD6( gl3wGetnTexImageARB, void  (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img) );
//     // MOCK_METHOD4( gl3wGetnUniformdv, void  (GLuint program, GLint location, GLsizei bufSize, GLdouble * params) );
//     // MOCK_METHOD4( gl3wGetnUniformdvARB, void  (GLuint program, GLint location, GLsizei bufSize, GLdouble * params) );
//     // MOCK_METHOD4( gl3wGetnUniformfv, void  (GLuint program, GLint location, GLsizei bufSize, GLfloat * params) );
//     // MOCK_METHOD4( gl3wGetnUniformfvARB, void  (GLuint program, GLint location, GLsizei bufSize, GLfloat * params) );
//     // MOCK_METHOD4( gl3wGetnUniformiv, void  (GLuint program, GLint location, GLsizei bufSize, GLint * params) );
//     // MOCK_METHOD4( gl3wGetnUniformivARB, void  (GLuint program, GLint location, GLsizei bufSize, GLint * params) );
//     // MOCK_METHOD4( gl3wGetnUniformuiv, void  (GLuint program, GLint location, GLsizei bufSize, GLuint * params) );
//     // MOCK_METHOD4( gl3wGetnUniformuivARB, void  (GLuint program, GLint location, GLsizei bufSize, GLuint * params) );
//     // MOCK_METHOD2( gl3wHint, void  (GLenum target, GLenum mode) );
//     // MOCK_METHOD1( gl3wInvalidateBufferData, void  (GLuint buffer) );
//     // MOCK_METHOD3( gl3wInvalidateBufferSubData, void  (GLuint buffer, GLintptr offset, GLsizeiptr length) );
//     // MOCK_METHOD3( gl3wInvalidateFramebuffer, void  (GLenum target, GLsizei numAttachments, const GLenum * attachments) );
//     // MOCK_METHOD3( gl3wInvalidateNamedFramebufferData, void  (GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments) );
//     // MOCK_METHOD7( gl3wInvalidateNamedFramebufferSubData, void  (GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) );
//     // MOCK_METHOD7( gl3wInvalidateSubFramebuffer, void  (GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) );
//     // MOCK_METHOD2( gl3wInvalidateTexImage, void  (GLuint texture, GLint level) );
//     // MOCK_METHOD8( gl3wInvalidateTexSubImage, void  (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) );
//     // MOCK_METHOD1( gl3wIsBuffer, unsigned char  (GLuint buffer) );
//     // MOCK_METHOD1( gl3wIsEnabled, unsigned char  (GLenum cap) );
//     // MOCK_METHOD2( gl3wIsEnabledi, unsigned char  (GLenum target, GLuint index) );
//     // MOCK_METHOD1( gl3wIsFramebuffer, unsigned char  (GLuint framebuffer) );
//     // MOCK_METHOD1( gl3wIsImageHandleResidentARB, unsigned char  (GLuint64 handle) );
//     // MOCK_METHOD2( gl3wIsNamedStringARB, unsigned char  (GLint namelen, const GLchar * name) );
//     // MOCK_METHOD1( gl3wIsProgram, unsigned char  (GLuint program) );
//     // MOCK_METHOD1( gl3wIsProgramPipeline, unsigned char  (GLuint pipeline) );
//     // MOCK_METHOD1( gl3wIsQuery, unsigned char  (GLuint id) );
//     // MOCK_METHOD1( gl3wIsRenderbuffer, unsigned char  (GLuint renderbuffer) );
//     // MOCK_METHOD1( gl3wIsSampler, unsigned char  (GLuint sampler) );
//     // MOCK_METHOD1( gl3wIsShader, unsigned char  (GLuint shader) );
//     // MOCK_METHOD1( gl3wIsSync, unsigned char  (GLsync sync) );
//     // MOCK_METHOD1( gl3wIsTexture, unsigned char  (GLuint texture) );
//     // MOCK_METHOD1( gl3wIsTextureHandleResidentARB, unsigned char  (GLuint64 handle) );
//     // MOCK_METHOD1( gl3wIsTransformFeedback, unsigned char  (GLuint id) );
//     // MOCK_METHOD1( gl3wIsVertexArray, unsigned char  (GLuint array) );
//     // MOCK_METHOD1( gl3wLineWidth, void  (GLfloat width) );
//     // MOCK_METHOD1( gl3wLinkProgram, void  (GLuint program) );
//     // MOCK_METHOD1( gl3wLogicOp, void  (GLenum opcode) );
//     // MOCK_METHOD1( gl3wMakeImageHandleNonResidentARB, void  (GLuint64 handle) );
//     // MOCK_METHOD2( gl3wMakeImageHandleResidentARB, void  (GLuint64 handle, GLenum access) );
//     // MOCK_METHOD1( gl3wMakeTextureHandleNonResidentARB, void  (GLuint64 handle) );
//     // MOCK_METHOD1( gl3wMakeTextureHandleResidentARB, void  (GLuint64 handle) );
//     // MOCK_METHOD2( gl3wMapBuffer, void * (GLenum target, GLenum access) );
//     // MOCK_METHOD4( gl3wMapBufferRange, void * (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) );
//     // MOCK_METHOD2( gl3wMapNamedBuffer, void * (GLuint buffer, GLenum access) );
//     // MOCK_METHOD4( gl3wMapNamedBufferRange, void * (GLuint buffer, GLintptr offset, GLsizei length, GLbitfield access) );
//     // MOCK_METHOD1( gl3wMemoryBarrier, void  (GLbitfield barriers) );
//     // MOCK_METHOD1( gl3wMemoryBarrierByRegion, void  (GLbitfield barriers) );
//     // MOCK_METHOD1( gl3wMinSampleShading, void  (GLfloat value) );
//     // MOCK_METHOD1( gl3wMinSampleShadingARB, void  (GLfloat value) );
//     // MOCK_METHOD4( gl3wMultiDrawArrays, void  (GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount) );
//     // MOCK_METHOD4( gl3wMultiDrawArraysIndirect, void  (GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) );
//     // MOCK_METHOD5( gl3wMultiDrawArraysIndirectCountARB, void  (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) );
//     // MOCK_METHOD5( gl3wMultiDrawElements, void  (GLenum mode, const GLsizei * count, GLenum type, const void *const * indices, GLsizei drawcount) );
//     // MOCK_METHOD6( gl3wMultiDrawElementsBaseVertex, void  (GLenum mode, const GLsizei * count, GLenum type, const void *const * indices, GLsizei drawcount, const GLint * basevertex) );
//     // MOCK_METHOD5( gl3wMultiDrawElementsIndirect, void  (GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) );
//     // MOCK_METHOD6( gl3wMultiDrawElementsIndirectCountARB, void  (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) );
//     // MOCK_METHOD4( gl3wNamedBufferData, void  (GLuint buffer, GLsizei size, const void * data, GLenum usage) );
//     // MOCK_METHOD4( gl3wNamedBufferPageCommitmentARB, void  (GLuint buffer, GLintptr offset, GLsizei size, GLboolean commit) );
//     // MOCK_METHOD4( gl3wNamedBufferPageCommitmentEXT, void  (GLuint buffer, GLintptr offset, GLsizei size, GLboolean commit) );
//     // MOCK_METHOD4( gl3wNamedBufferStorage, void  (GLuint buffer, GLsizei size, const void * data, GLbitfield flags) );
//     // MOCK_METHOD4( gl3wNamedBufferSubData, void  (GLuint buffer, GLintptr offset, GLsizei size, const void * data) );
//     // MOCK_METHOD2( gl3wNamedFramebufferDrawBuffer, void  (GLuint framebuffer, GLenum buf) );
//     // MOCK_METHOD3( gl3wNamedFramebufferDrawBuffers, void  (GLuint framebuffer, GLsizei n, const GLenum * bufs) );
//     // MOCK_METHOD3( gl3wNamedFramebufferParameteri, void  (GLuint framebuffer, GLenum pname, GLint param) );
//     // MOCK_METHOD2( gl3wNamedFramebufferReadBuffer, void  (GLuint framebuffer, GLenum src) );
//     // MOCK_METHOD4( gl3wNamedFramebufferRenderbuffer, void  (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) );
//     // MOCK_METHOD4( gl3wNamedFramebufferTexture, void  (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) );
//     // MOCK_METHOD5( gl3wNamedFramebufferTextureLayer, void  (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) );
//     // MOCK_METHOD4( gl3wNamedRenderbufferStorage, void  (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) );
//     // MOCK_METHOD5( gl3wNamedRenderbufferStorageMultisample, void  (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) );
//     // MOCK_METHOD5( gl3wNamedStringARB, void  (GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string) );
//     // MOCK_METHOD4( gl3wObjectLabel, void  (GLenum identifier, GLuint name, GLsizei length, const GLchar * label) );
//     // MOCK_METHOD3( gl3wObjectPtrLabel, void  (const void * ptr, GLsizei length, const GLchar * label) );
//     // MOCK_METHOD2( gl3wPatchParameterfv, void  (GLenum pname, const GLfloat * values) );
//     // MOCK_METHOD2( gl3wPatchParameteri, void  (GLenum pname, GLint value) );
//     // MOCK_METHOD0( gl3wPauseTransformFeedback, void  () );
//     // MOCK_METHOD2( gl3wPixelStoref, void  (GLenum pname, GLfloat param) );
//     // MOCK_METHOD2( gl3wPixelStorei, void  (GLenum pname, GLint param) );
//     // MOCK_METHOD2( gl3wPointParameterf, void  (GLenum pname, GLfloat param) );
//     // MOCK_METHOD2( gl3wPointParameterfv, void  (GLenum pname, const GLfloat * params) );
//     // MOCK_METHOD2( gl3wPointParameteri, void  (GLenum pname, GLint param) );
//     // MOCK_METHOD2( gl3wPointParameteriv, void  (GLenum pname, const GLint * params) );
//     // MOCK_METHOD1( gl3wPointSize, void  (GLfloat size) );
//     // MOCK_METHOD2( gl3wPolygonMode, void  (GLenum face, GLenum mode) );
//     // MOCK_METHOD2( gl3wPolygonOffset, void  (GLfloat factor, GLfloat units) );
//     // MOCK_METHOD0( gl3wPopDebugGroup, void  () );
//     // MOCK_METHOD1( gl3wPrimitiveRestartIndex, void  (GLuint index) );
//     // MOCK_METHOD4( gl3wProgramBinary, void  (GLuint program, GLenum binaryFormat, const void * binary, GLsizei length) );
//     // MOCK_METHOD3( gl3wProgramParameteri, void  (GLuint program, GLenum pname, GLint value) );
//     // MOCK_METHOD3( gl3wProgramUniform1d, void  (GLuint program, GLint location, GLdouble v0) );
//     // MOCK_METHOD4( gl3wProgramUniform1dv, void  (GLuint program, GLint location, GLsizei count, const GLdouble * value) );
//     // MOCK_METHOD3( gl3wProgramUniform1f, void  (GLuint program, GLint location, GLfloat v0) );
//     // MOCK_METHOD4( gl3wProgramUniform1fv, void  (GLuint program, GLint location, GLsizei count, const GLfloat * value) );
//     // MOCK_METHOD3( gl3wProgramUniform1i, void  (GLuint program, GLint location, GLint v0) );
//     // MOCK_METHOD4( gl3wProgramUniform1iv, void  (GLuint program, GLint location, GLsizei count, const GLint * value) );
//     // MOCK_METHOD3( gl3wProgramUniform1ui, void  (GLuint program, GLint location, GLuint v0) );
//     // MOCK_METHOD4( gl3wProgramUniform1uiv, void  (GLuint program, GLint location, GLsizei count, const GLuint * value) );
//     // MOCK_METHOD4( gl3wProgramUniform2d, void  (GLuint program, GLint location, GLdouble v0, GLdouble v1) );
//     // MOCK_METHOD4( gl3wProgramUniform2dv, void  (GLuint program, GLint location, GLsizei count, const GLdouble * value) );
//     // MOCK_METHOD4( gl3wProgramUniform2f, void  (GLuint program, GLint location, GLfloat v0, GLfloat v1) );
//     // MOCK_METHOD4( gl3wProgramUniform2fv, void  (GLuint program, GLint location, GLsizei count, const GLfloat * value) );
//     // MOCK_METHOD4( gl3wProgramUniform2i, void  (GLuint program, GLint location, GLint v0, GLint v1) );
//     // MOCK_METHOD4( gl3wProgramUniform2iv, void  (GLuint program, GLint location, GLsizei count, const GLint * value) );
//     // MOCK_METHOD4( gl3wProgramUniform2ui, void  (GLuint program, GLint location, GLuint v0, GLuint v1) );
//     // MOCK_METHOD4( gl3wProgramUniform2uiv, void  (GLuint program, GLint location, GLsizei count, const GLuint * value) );
//     // MOCK_METHOD5( gl3wProgramUniform3d, void  (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) );
//     // MOCK_METHOD4( gl3wProgramUniform3dv, void  (GLuint program, GLint location, GLsizei count, const GLdouble * value) );
//     // MOCK_METHOD5( gl3wProgramUniform3f, void  (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) );
//     // MOCK_METHOD4( gl3wProgramUniform3fv, void  (GLuint program, GLint location, GLsizei count, const GLfloat * value) );
//     // MOCK_METHOD5( gl3wProgramUniform3i, void  (GLuint program, GLint location, GLint v0, GLint v1, GLint v2) );
//     // MOCK_METHOD4( gl3wProgramUniform3iv, void  (GLuint program, GLint location, GLsizei count, const GLint * value) );
//     // MOCK_METHOD5( gl3wProgramUniform3ui, void  (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) );
//     // MOCK_METHOD4( gl3wProgramUniform3uiv, void  (GLuint program, GLint location, GLsizei count, const GLuint * value) );
//     // MOCK_METHOD6( gl3wProgramUniform4d, void  (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) );
//     // MOCK_METHOD4( gl3wProgramUniform4dv, void  (GLuint program, GLint location, GLsizei count, const GLdouble * value) );
//     // MOCK_METHOD6( gl3wProgramUniform4f, void  (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) );
//     // MOCK_METHOD4( gl3wProgramUniform4fv, void  (GLuint program, GLint location, GLsizei count, const GLfloat * value) );
//     // MOCK_METHOD6( gl3wProgramUniform4i, void  (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) );
//     // MOCK_METHOD4( gl3wProgramUniform4iv, void  (GLuint program, GLint location, GLsizei count, const GLint * value) );
//     // MOCK_METHOD6( gl3wProgramUniform4ui, void  (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) );
//     // MOCK_METHOD4( gl3wProgramUniform4uiv, void  (GLuint program, GLint location, GLsizei count, const GLuint * value) );
//     // MOCK_METHOD3( gl3wProgramUniformHandleui64ARB, void  (GLuint program, GLint location, GLuint64 value) );
//     // MOCK_METHOD4( gl3wProgramUniformHandleui64vARB, void  (GLuint program, GLint location, GLsizei count, const GLuint64 * values) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix2dv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix2fv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix2x3dv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix2x3fv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix2x4dv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix2x4fv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix3dv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix3fv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix3x2dv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix3x2fv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix3x4dv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix3x4fv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix4dv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix4fv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix4x2dv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix4x2fv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix4x3dv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD5( gl3wProgramUniformMatrix4x3fv, void  (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD1( gl3wProvokingVertex, void  (GLenum mode) );
//     // MOCK_METHOD4( gl3wPushDebugGroup, void  (GLenum source, GLuint id, GLsizei length, const GLchar * message) );
//     // MOCK_METHOD2( gl3wQueryCounter, void  (GLuint id, GLenum target) );
//     // MOCK_METHOD1( gl3wReadBuffer, void  (GLenum src) );
//     // MOCK_METHOD7( gl3wReadPixels, void  (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels) );
//     // MOCK_METHOD8( gl3wReadnPixels, void  (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) );
//     // MOCK_METHOD8( gl3wReadnPixelsARB, void  (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) );
//     // MOCK_METHOD0( gl3wReleaseShaderCompiler, void  () );
//     // MOCK_METHOD4( gl3wRenderbufferStorage, void  (GLenum target, GLenum internalformat, GLsizei width, GLsizei height) );
//     // MOCK_METHOD5( gl3wRenderbufferStorageMultisample, void  (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) );
//     // MOCK_METHOD0( gl3wResumeTransformFeedback, void  () );
//     // MOCK_METHOD2( gl3wSampleCoverage, void  (GLfloat value, GLboolean invert) );
//     // MOCK_METHOD2( gl3wSampleMaski, void  (GLuint maskNumber, GLbitfield mask) );
//     // MOCK_METHOD3( gl3wSamplerParameterIiv, void  (GLuint sampler, GLenum pname, const GLint * param) );
//     // MOCK_METHOD3( gl3wSamplerParameterIuiv, void  (GLuint sampler, GLenum pname, const GLuint * param) );
//     // MOCK_METHOD3( gl3wSamplerParameterf, void  (GLuint sampler, GLenum pname, GLfloat param) );
//     // MOCK_METHOD3( gl3wSamplerParameterfv, void  (GLuint sampler, GLenum pname, const GLfloat * param) );
//     // MOCK_METHOD3( gl3wSamplerParameteri, void  (GLuint sampler, GLenum pname, GLint param) );
//     // MOCK_METHOD3( gl3wSamplerParameteriv, void  (GLuint sampler, GLenum pname, const GLint * param) );
//     // MOCK_METHOD4( gl3wScissor, void  (GLint x, GLint y, GLsizei width, GLsizei height) );
//     // MOCK_METHOD3( gl3wScissorArrayv, void  (GLuint first, GLsizei count, const GLint * v) );
//     // MOCK_METHOD5( gl3wScissorIndexed, void  (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) );
//     // MOCK_METHOD2( gl3wScissorIndexedv, void  (GLuint index, const GLint * v) );
//     // MOCK_METHOD5( gl3wShaderBinary, void  (GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length) );
//     // MOCK_METHOD4( gl3wShaderSource, void  (GLuint shader, GLsizei count, const GLchar *const * string, const GLint * length) );
//     // MOCK_METHOD3( gl3wShaderStorageBlockBinding, void  (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) );
//     // MOCK_METHOD3( gl3wStencilFunc, void  (GLenum func, GLint ref, GLuint mask) );
//     // MOCK_METHOD4( gl3wStencilFuncSeparate, void  (GLenum face, GLenum func, GLint ref, GLuint mask) );
//     // MOCK_METHOD1( gl3wStencilMask, void  (GLuint mask) );
//     // MOCK_METHOD2( gl3wStencilMaskSeparate, void  (GLenum face, GLuint mask) );
//     // MOCK_METHOD3( gl3wStencilOp, void  (GLenum fail, GLenum zfail, GLenum zpass) );
//     // MOCK_METHOD4( gl3wStencilOpSeparate, void  (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) );
//     // MOCK_METHOD3( gl3wTexBuffer, void  (GLenum target, GLenum internalformat, GLuint buffer) );
//     // MOCK_METHOD5( gl3wTexBufferRange, void  (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) );
//     // MOCK_METHOD8( gl3wTexImage1D, void  (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) );
//     // MOCK_METHOD9( gl3wTexImage2D, void  (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) );
//     // MOCK_METHOD6( gl3wTexImage2DMultisample, void  (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) );
//     // MOCK_METHOD10( gl3wTexImage3D, void  (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) );
//     // MOCK_METHOD7( gl3wTexImage3DMultisample, void  (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) );
//     // MOCK_METHOD9( gl3wTexPageCommitmentARB, void  (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident) );
//     // MOCK_METHOD3( gl3wTexParameterIiv, void  (GLenum target, GLenum pname, const GLint * params) );
//     // MOCK_METHOD3( gl3wTexParameterIuiv, void  (GLenum target, GLenum pname, const GLuint * params) );
//     // MOCK_METHOD3( gl3wTexParameterf, void  (GLenum target, GLenum pname, GLfloat param) );
//     // MOCK_METHOD3( gl3wTexParameterfv, void  (GLenum target, GLenum pname, const GLfloat * params) );
//     // MOCK_METHOD3( gl3wTexParameteri, void  (GLenum target, GLenum pname, GLint param) );
//     // MOCK_METHOD3( gl3wTexParameteriv, void  (GLenum target, GLenum pname, const GLint * params) );
//     // MOCK_METHOD4( gl3wTexStorage1D, void  (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) );
//     // MOCK_METHOD5( gl3wTexStorage2D, void  (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) );
//     // MOCK_METHOD6( gl3wTexStorage2DMultisample, void  (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) );
//     // MOCK_METHOD6( gl3wTexStorage3D, void  (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) );
//     // MOCK_METHOD7( gl3wTexStorage3DMultisample, void  (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) );
//     // MOCK_METHOD7( gl3wTexSubImage1D, void  (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) );
//     // MOCK_METHOD9( gl3wTexSubImage2D, void  (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) );
//     // MOCK_METHOD0( gl3wTextureBarrier, void  () );
//     // MOCK_METHOD3( gl3wTextureBuffer, void  (GLuint texture, GLenum internalformat, GLuint buffer) );
//     // MOCK_METHOD5( gl3wTextureBufferRange, void  (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizei size) );
//     // MOCK_METHOD3( gl3wTextureParameterIiv, void  (GLuint texture, GLenum pname, const GLint * params) );
//     // MOCK_METHOD3( gl3wTextureParameterIuiv, void  (GLuint texture, GLenum pname, const GLuint * params) );
//     // MOCK_METHOD3( gl3wTextureParameterf, void  (GLuint texture, GLenum pname, GLfloat param) );
//     // MOCK_METHOD3( gl3wTextureParameterfv, void  (GLuint texture, GLenum pname, const GLfloat * param) );
//     // MOCK_METHOD3( gl3wTextureParameteri, void  (GLuint texture, GLenum pname, GLint param) );
//     // MOCK_METHOD3( gl3wTextureParameteriv, void  (GLuint texture, GLenum pname, const GLint * param) );
//     // MOCK_METHOD4( gl3wTextureStorage1D, void  (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) );
//     // MOCK_METHOD5( gl3wTextureStorage2D, void  (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) );
//     // MOCK_METHOD6( gl3wTextureStorage2DMultisample, void  (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) );
//     // MOCK_METHOD6( gl3wTextureStorage3D, void  (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) );
//     // MOCK_METHOD7( gl3wTextureStorage3DMultisample, void  (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) );
//     // MOCK_METHOD7( gl3wTextureSubImage1D, void  (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) );
//     // MOCK_METHOD9( gl3wTextureSubImage2D, void  (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) );
//     // MOCK_METHOD8( gl3wTextureView, void  (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) );
//     // MOCK_METHOD3( gl3wTransformFeedbackBufferBase, void  (GLuint xfb, GLuint index, GLuint buffer) );
//     // MOCK_METHOD5( gl3wTransformFeedbackBufferRange, void  (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizei size) );
//     // MOCK_METHOD4( gl3wTransformFeedbackVaryings, void  (GLuint program, GLsizei count, const GLchar *const * varyings, GLenum bufferMode) );
//     // MOCK_METHOD2( gl3wUniform1d, void  (GLint location, GLdouble x) );
//     // MOCK_METHOD3( gl3wUniform1dv, void  (GLint location, GLsizei count, const GLdouble * value) );
//     // MOCK_METHOD2( gl3wUniform1f, void  (GLint location, GLfloat v0) );
//     // MOCK_METHOD3( gl3wUniform1fv, void  (GLint location, GLsizei count, const GLfloat * value) );
//     // MOCK_METHOD2( gl3wUniform1i, void  (GLint location, GLint v0) );
//     // MOCK_METHOD3( gl3wUniform1iv, void  (GLint location, GLsizei count, const GLint * value) );
//     // MOCK_METHOD2( gl3wUniform1ui, void  (GLint location, GLuint v0) );
//     // MOCK_METHOD3( gl3wUniform1uiv, void  (GLint location, GLsizei count, const GLuint * value) );
//     // MOCK_METHOD3( gl3wUniform2d, void  (GLint location, GLdouble x, GLdouble y) );
//     // MOCK_METHOD3( gl3wUniform2dv, void  (GLint location, GLsizei count, const GLdouble * value) );
//     // MOCK_METHOD3( gl3wUniform2f, void  (GLint location, GLfloat v0, GLfloat v1) );
//     // MOCK_METHOD3( gl3wUniform2fv, void  (GLint location, GLsizei count, const GLfloat * value) );
//     // MOCK_METHOD3( gl3wUniform2i, void  (GLint location, GLint v0, GLint v1) );
//     // MOCK_METHOD3( gl3wUniform2iv, void  (GLint location, GLsizei count, const GLint * value) );
//     // MOCK_METHOD3( gl3wUniform2ui, void  (GLint location, GLuint v0, GLuint v1) );
//     // MOCK_METHOD3( gl3wUniform2uiv, void  (GLint location, GLsizei count, const GLuint * value) );
//     // MOCK_METHOD4( gl3wUniform3d, void  (GLint location, GLdouble x, GLdouble y, GLdouble z) );
//     // MOCK_METHOD3( gl3wUniform3dv, void  (GLint location, GLsizei count, const GLdouble * value) );
//     // MOCK_METHOD4( gl3wUniform3f, void  (GLint location, GLfloat v0, GLfloat v1, GLfloat v2) );
//     // MOCK_METHOD3( gl3wUniform3fv, void  (GLint location, GLsizei count, const GLfloat * value) );
//     // MOCK_METHOD4( gl3wUniform3i, void  (GLint location, GLint v0, GLint v1, GLint v2) );
//     // MOCK_METHOD3( gl3wUniform3iv, void  (GLint location, GLsizei count, const GLint * value) );
//     // MOCK_METHOD4( gl3wUniform3ui, void  (GLint location, GLuint v0, GLuint v1, GLuint v2) );
//     // MOCK_METHOD3( gl3wUniform3uiv, void  (GLint location, GLsizei count, const GLuint * value) );
//     // MOCK_METHOD5( gl3wUniform4d, void  (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) );
//     // MOCK_METHOD3( gl3wUniform4dv, void  (GLint location, GLsizei count, const GLdouble * value) );
//     // MOCK_METHOD5( gl3wUniform4f, void  (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) );
//     // MOCK_METHOD3( gl3wUniform4fv, void  (GLint location, GLsizei count, const GLfloat * value) );
//     // MOCK_METHOD5( gl3wUniform4i, void  (GLint location, GLint v0, GLint v1, GLint v2, GLint v3) );
//     // MOCK_METHOD3( gl3wUniform4iv, void  (GLint location, GLsizei count, const GLint * value) );
//     // MOCK_METHOD5( gl3wUniform4ui, void  (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) );
//     // MOCK_METHOD3( gl3wUniform4uiv, void  (GLint location, GLsizei count, const GLuint * value) );
//     // MOCK_METHOD3( gl3wUniformBlockBinding, void  (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) );
//     // MOCK_METHOD2( gl3wUniformHandleui64ARB, void  (GLint location, GLuint64 value) );
//     // MOCK_METHOD3( gl3wUniformHandleui64vARB, void  (GLint location, GLsizei count, const GLuint64 * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix2dv, void  (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix2fv, void  (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix2x3dv, void  (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix2x3fv, void  (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix2x4dv, void  (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix2x4fv, void  (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix3dv, void  (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix3fv, void  (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix3x2dv, void  (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix3x2fv, void  (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix3x4dv, void  (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix3x4fv, void  (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix4dv, void  (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix4fv, void  (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix4x2dv, void  (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix4x2fv, void  (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix4x3dv, void  (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) );
//     // MOCK_METHOD4( gl3wUniformMatrix4x3fv, void  (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) );
//     // MOCK_METHOD3( gl3wUniformSubroutinesuiv, void  (GLenum shadertype, GLsizei count, const GLuint * indices) );
//     // MOCK_METHOD1( gl3wUnmapBuffer, unsigned char  (GLenum target) );
//     // MOCK_METHOD1( gl3wUnmapNamedBuffer, unsigned char  (GLuint buffer) );
//     // MOCK_METHOD1( gl3wUseProgram, void  (GLuint program) );
//     // MOCK_METHOD3( gl3wUseProgramStages, void  (GLuint pipeline, GLbitfield stages, GLuint program) );
//     // MOCK_METHOD1( gl3wValidateProgram, void  (GLuint program) );
//     // MOCK_METHOD1( gl3wValidateProgramPipeline, void  (GLuint pipeline) );
//     // MOCK_METHOD3( gl3wVertexArrayAttribBinding, void  (GLuint vaobj, GLuint attribindex, GLuint bindingindex) );
//     // MOCK_METHOD6( gl3wVertexArrayAttribFormat, void  (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) );
//     // MOCK_METHOD5( gl3wVertexArrayAttribIFormat, void  (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) );
//     // MOCK_METHOD5( gl3wVertexArrayAttribLFormat, void  (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) );
//     // MOCK_METHOD3( gl3wVertexArrayBindingDivisor, void  (GLuint vaobj, GLuint bindingindex, GLuint divisor) );
//     // MOCK_METHOD2( gl3wVertexArrayElementBuffer, void  (GLuint vaobj, GLuint buffer) );
//     // MOCK_METHOD5( gl3wVertexArrayVertexBuffer, void  (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) );
//     // MOCK_METHOD6( gl3wVertexArrayVertexBuffers, void  (GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) );
//     // MOCK_METHOD2( gl3wVertexAttrib1d, void  (GLuint index, GLdouble x) );
//     // MOCK_METHOD2( gl3wVertexAttrib1dv, void  (GLuint index, const GLdouble * v) );
//     // MOCK_METHOD2( gl3wVertexAttrib1f, void  (GLuint index, GLfloat x) );
//     // MOCK_METHOD2( gl3wVertexAttrib1fv, void  (GLuint index, const GLfloat * v) );
//     // MOCK_METHOD2( gl3wVertexAttrib1s, void  (GLuint index, GLshort x) );
//     // MOCK_METHOD2( gl3wVertexAttrib1sv, void  (GLuint index, const GLshort * v) );
//     // MOCK_METHOD3( gl3wVertexAttrib2d, void  (GLuint index, GLdouble x, GLdouble y) );
//     // MOCK_METHOD2( gl3wVertexAttrib2dv, void  (GLuint index, const GLdouble * v) );
//     // MOCK_METHOD3( gl3wVertexAttrib2f, void  (GLuint index, GLfloat x, GLfloat y) );
//     // MOCK_METHOD2( gl3wVertexAttrib2fv, void  (GLuint index, const GLfloat * v) );
//     // MOCK_METHOD3( gl3wVertexAttrib2s, void  (GLuint index, GLshort x, GLshort y) );
//     // MOCK_METHOD2( gl3wVertexAttrib2sv, void  (GLuint index, const GLshort * v) );
//     // MOCK_METHOD4( gl3wVertexAttrib3d, void  (GLuint index, GLdouble x, GLdouble y, GLdouble z) );
//     // MOCK_METHOD2( gl3wVertexAttrib3dv, void  (GLuint index, const GLdouble * v) );
//     // MOCK_METHOD4( gl3wVertexAttrib3f, void  (GLuint index, GLfloat x, GLfloat y, GLfloat z) );
//     // MOCK_METHOD2( gl3wVertexAttrib3fv, void  (GLuint index, const GLfloat * v) );
//     // MOCK_METHOD4( gl3wVertexAttrib3s, void  (GLuint index, GLshort x, GLshort y, GLshort z) );
//     // MOCK_METHOD2( gl3wVertexAttrib3sv, void  (GLuint index, const GLshort * v) );
//     // MOCK_METHOD2( gl3wVertexAttrib4Nbv, void  (GLuint index, const GLbyte * v) );
//     // MOCK_METHOD2( gl3wVertexAttrib4Niv, void  (GLuint index, const GLint * v) );
//     // MOCK_METHOD2( gl3wVertexAttrib4Nsv, void  (GLuint index, const GLshort * v) );
//     // MOCK_METHOD5( gl3wVertexAttrib4Nub, void  (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) );
//     // MOCK_METHOD2( gl3wVertexAttrib4Nubv, void  (GLuint index, const GLubyte * v) );
//     // MOCK_METHOD2( gl3wVertexAttrib4Nuiv, void  (GLuint index, const GLuint * v) );
//     // MOCK_METHOD2( gl3wVertexAttrib4Nusv, void  (GLuint index, const GLushort * v) );
//     // MOCK_METHOD2( gl3wVertexAttrib4bv, void  (GLuint index, const GLbyte * v) );
//     // MOCK_METHOD5( gl3wVertexAttrib4d, void  (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) );
//     // MOCK_METHOD2( gl3wVertexAttrib4dv, void  (GLuint index, const GLdouble * v) );
//     // MOCK_METHOD5( gl3wVertexAttrib4f, void  (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) );
//     // MOCK_METHOD2( gl3wVertexAttrib4fv, void  (GLuint index, const GLfloat * v) );
//     // MOCK_METHOD2( gl3wVertexAttrib4iv, void  (GLuint index, const GLint * v) );
//     // MOCK_METHOD5( gl3wVertexAttrib4s, void  (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) );
//     // MOCK_METHOD2( gl3wVertexAttrib4sv, void  (GLuint index, const GLshort * v) );
//     // MOCK_METHOD2( gl3wVertexAttrib4ubv, void  (GLuint index, const GLubyte * v) );
//     // MOCK_METHOD2( gl3wVertexAttrib4uiv, void  (GLuint index, const GLuint * v) );
//     // MOCK_METHOD2( gl3wVertexAttrib4usv, void  (GLuint index, const GLushort * v) );
//     // MOCK_METHOD2( gl3wVertexAttribBinding, void  (GLuint attribindex, GLuint bindingindex) );
//     // MOCK_METHOD2( gl3wVertexAttribDivisor, void  (GLuint index, GLuint divisor) );
//     // MOCK_METHOD5( gl3wVertexAttribFormat, void  (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) );
//     // MOCK_METHOD2( gl3wVertexAttribI1i, void  (GLuint index, GLint x) );
//     // MOCK_METHOD2( gl3wVertexAttribI1iv, void  (GLuint index, const GLint * v) );
//     // MOCK_METHOD2( gl3wVertexAttribI1ui, void  (GLuint index, GLuint x) );
//     // MOCK_METHOD2( gl3wVertexAttribI1uiv, void  (GLuint index, const GLuint * v) );
//     // MOCK_METHOD3( gl3wVertexAttribI2i, void  (GLuint index, GLint x, GLint y) );
//     // MOCK_METHOD2( gl3wVertexAttribI2iv, void  (GLuint index, const GLint * v) );
//     // MOCK_METHOD3( gl3wVertexAttribI2ui, void  (GLuint index, GLuint x, GLuint y) );
//     // MOCK_METHOD2( gl3wVertexAttribI2uiv, void  (GLuint index, const GLuint * v) );
//     // MOCK_METHOD4( gl3wVertexAttribI3i, void  (GLuint index, GLint x, GLint y, GLint z) );
//     // MOCK_METHOD2( gl3wVertexAttribI3iv, void  (GLuint index, const GLint * v) );
//     // MOCK_METHOD4( gl3wVertexAttribI3ui, void  (GLuint index, GLuint x, GLuint y, GLuint z) );
//     // MOCK_METHOD2( gl3wVertexAttribI3uiv, void  (GLuint index, const GLuint * v) );
//     // MOCK_METHOD2( gl3wVertexAttribI4bv, void  (GLuint index, const GLbyte * v) );
//     // MOCK_METHOD5( gl3wVertexAttribI4i, void  (GLuint index, GLint x, GLint y, GLint z, GLint w) );
//     // MOCK_METHOD2( gl3wVertexAttribI4iv, void  (GLuint index, const GLint * v) );
//     // MOCK_METHOD2( gl3wVertexAttribI4sv, void  (GLuint index, const GLshort * v) );
//     // MOCK_METHOD2( gl3wVertexAttribI4ubv, void  (GLuint index, const GLubyte * v) );
//     // MOCK_METHOD5( gl3wVertexAttribI4ui, void  (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) );
//     // MOCK_METHOD2( gl3wVertexAttribI4uiv, void  (GLuint index, const GLuint * v) );
//     // MOCK_METHOD2( gl3wVertexAttribI4usv, void  (GLuint index, const GLushort * v) );
//     // MOCK_METHOD4( gl3wVertexAttribIFormat, void  (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) );
//     // MOCK_METHOD5( gl3wVertexAttribIPointer, void  (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) );
//     // MOCK_METHOD2( gl3wVertexAttribL1d, void  (GLuint index, GLdouble x) );
//     // MOCK_METHOD2( gl3wVertexAttribL1dv, void  (GLuint index, const GLdouble * v) );
//     // MOCK_METHOD2( gl3wVertexAttribL1ui64ARB, void  (GLuint index, GLuint64EXT x) );
//     // MOCK_METHOD2( gl3wVertexAttribL1ui64vARB, void  (GLuint index, const GLuint64EXT * v) );
//     // MOCK_METHOD3( gl3wVertexAttribL2d, void  (GLuint index, GLdouble x, GLdouble y) );
//     // MOCK_METHOD2( gl3wVertexAttribL2dv, void  (GLuint index, const GLdouble * v) );
//     // MOCK_METHOD4( gl3wVertexAttribL3d, void  (GLuint index, GLdouble x, GLdouble y, GLdouble z) );
//     // MOCK_METHOD2( gl3wVertexAttribL3dv, void  (GLuint index, const GLdouble * v) );
//     // MOCK_METHOD5( gl3wVertexAttribL4d, void  (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) );
//     // MOCK_METHOD2( gl3wVertexAttribL4dv, void  (GLuint index, const GLdouble * v) );
//     // MOCK_METHOD4( gl3wVertexAttribLFormat, void  (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) );
//     // MOCK_METHOD5( gl3wVertexAttribLPointer, void  (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) );
//     // MOCK_METHOD4( gl3wVertexAttribP1ui, void  (GLuint index, GLenum type, GLboolean normalized, GLuint value) );
//     // MOCK_METHOD4( gl3wVertexAttribP1uiv, void  (GLuint index, GLenum type, GLboolean normalized, const GLuint * value) );
//     // MOCK_METHOD4( gl3wVertexAttribP2ui, void  (GLuint index, GLenum type, GLboolean normalized, GLuint value) );
//     // MOCK_METHOD4( gl3wVertexAttribP2uiv, void  (GLuint index, GLenum type, GLboolean normalized, const GLuint * value) );
//     // MOCK_METHOD4( gl3wVertexAttribP3ui, void  (GLuint index, GLenum type, GLboolean normalized, GLuint value) );
//     // MOCK_METHOD4( gl3wVertexAttribP3uiv, void  (GLuint index, GLenum type, GLboolean normalized, const GLuint * value) );
//     // MOCK_METHOD4( gl3wVertexAttribP4ui, void  (GLuint index, GLenum type, GLboolean normalized, GLuint value) );
//     // MOCK_METHOD4( gl3wVertexAttribP4uiv, void  (GLuint index, GLenum type, GLboolean normalized, const GLuint * value) );
//     // MOCK_METHOD6( gl3wVertexAttribPointer, void  (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) );
//     // MOCK_METHOD2( gl3wVertexBindingDivisor, void  (GLuint bindingindex, GLuint divisor) );
//     // MOCK_METHOD4( gl3wViewport, void  (GLint x, GLint y, GLsizei width, GLsizei height) );
//     // MOCK_METHOD3( gl3wViewportArrayv, void  (GLuint first, GLsizei count, const GLfloat * v) );
//     // MOCK_METHOD5( gl3wViewportIndexedf, void  (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) );
//     // MOCK_METHOD2( gl3wViewportIndexedfv, void  (GLuint index, const GLfloat * v) );
//     // MOCK_METHOD3( gl3wWaitSync, void  (GLsync sync, GLbitfield flags, GLuint64 timeout) );
// };
// #endif /* __GLMOCK_HPP__ */
